---
import Layout from "../layouts/Layout.astro";
import Spinner from "../components/ui/Spinner.astro";
import dbConnect from "../lib/mongoose";
import FilmografiaModel from "../lib/models/filmografia";
import { useTranslations, defaultLanguage } from "../i18n/languages";
import { generateSlug, slugManager } from "../utils/slugManager.js";

// Obtener el idioma actual
const lang = (Astro.locals as any)?.lang || defaultLanguage;
const t = useTranslations(lang);

// Definir la interfaz para filmografia
interface FilmografiaItem {
  _id: string;
  titulo: string;
  tituloEn?: string;
  tituloCat?: string;
  genero?: string;
  generoEn?: string;
  generoCat?: string;
  sinopsis: string;
  sinopsisEn?: string;
  sinopsisCat?: string;
  urlPoster?: string;
  fecha?: number;
  duracion?: number;
  director?: string;
  linkImdb?: string;
  urlYoutube?: string;
  urlMakingOf?: string;
  tipo?: string;
  plataformas?: string;
  guionistas?: string;
  reparto?: string;
}

// Obtener datos de la base de datos
let filmografia: FilmografiaItem[] = [];
let loading: boolean = true;
let error: string | null = null;

try {
  await dbConnect();
  filmografia = (await FilmografiaModel.find({}).sort({
    fecha: -1,
  })) as FilmografiaItem[];

  slugManager.initializeWithFilms(filmografia, (item: FilmografiaItem) => {
    if (lang === "en" && item.tituloEn) return item.tituloEn;
    if (lang === "ca" && item.tituloCat) return item.tituloCat;
    return item.titulo;
  });

  loading = false;
} catch (e) {
  console.error(e);
  error = "Error al cargar la filmografía";
  loading = false;
}

// Funciones de helpers
function getTitulo(item: FilmografiaItem): string {
  if (lang === "en" && item.tituloEn) return item.tituloEn;
  if (lang === "ca" && item.tituloCat) return item.tituloCat;
  return item.titulo;
}

function getGenero(item: FilmografiaItem): string {
  if (lang === "en" && item.generoEn) return item.generoEn;
  if (lang === "ca" && item.generoCat) return item.generoCat;
  return item.genero || "";
}

function getSinopsis(item: FilmografiaItem): string {
  if (lang === "en" && item.sinopsisEn) return item.sinopsisEn;
  if (lang === "ca" && item.sinopsisCat) return item.sinopsisCat;
  return item.sinopsis;
}

function getFilmSlug(item: FilmografiaItem): string {
  const baseSlug = generateSlug(getTitulo(item));
  return slugManager.registerSlug(baseSlug, item._id.toString());
}
---

<Layout
  title="Filmografía - Rodar y Rodar"
  description="Explora nuestra filmografía de producciones cinematográficas"
>
  <div class="container mx-auto px-4 py-12">
    <h1 class="text-4xl font-bold mb-4 text-center">{t("filmography")}</h1>

    {loading && <Spinner />}

    {error && (
      <div
        class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative"
        role="alert"
      >
        <span class="block sm:inline">{error}</span>
      </div>
    )}

    {!loading && !error && (
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {filmografia.length > 0 ? (
          filmografia.map((item) => (
            <div class="bg-gray-100 dark:bg-gray-800 rounded-lg overflow-hidden shadow-md hover:shadow-lg transition h-full flex flex-col">
              <div class="flex h-64 md:h-72 gap-4">
                <!-- Póster con bordes redondeados y hover tipo catálogo -->
                <a
                  href={`/${getFilmSlug(item)}`}
                  class="group flex-none h-full aspect-[2/3] rounded-lg overflow-hidden bg-gray-200 dark:bg-gray-700"
                >
                  <img
                    src={item.urlPoster}
                    alt={getTitulo(item)}
                    class="w-full h-full object-contain transition-transform duration-300 group-hover:scale-[1.05]"
                    loading="lazy"
                    decoding="async"
                  />
                </a>

                <!-- Texto -->
                <div class="flex-1  flex flex-col">
                  <a
                    href={`/${getFilmSlug(item)}`}
                    class="block hover:text-primary transition"
                  >
                    <h3 class="text-lg font-semibold mb-2">
                      {getTitulo(item)}
                    </h3>
                  </a>

                  <p class="text-gray-600 dark:text-gray-300 mb-2">
                    {item.fecha}{" "}
                    {item.duracion ? `| ${item.duracion} min` : ""}
                    {getGenero(item) && ` | ${getGenero(item)}`}
                  </p>

                  {item.director && (
                    <p class="text-gray-600 dark:text-gray-300 mb-2">
                      {t("directed_by")}: {item.director}
                    </p>
                  )}

                  <p class="text-gray-600 dark:text-gray-300 line-clamp-3 mb-2">
                    {getSinopsis(item)}
                  </p>

                  <div class="mt-auto flex justify-between items-center flex-wrap gap-y-3">
                    <div class="flex flex-wrap gap-2">
                      {item.linkImdb && (
                        <a
                          href={item.linkImdb}
                          target="_blank"
                          rel="noopener noreferrer"
                          class="inline-flex items-center text-sm text-primary hover:underline"
                        >
                          <span>IMDb</span>
                          <svg
                            xmlns="http://www.w3.org/2000/svg"
                            class="h-4 w-4 ml-1"
                            fill="none"
                            viewBox="0 0 24 24"
                            stroke="currentColor"
                          >
                            <path
                              stroke-linecap="round"
                              stroke-linejoin="round"
                              stroke-width="2"
                              d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"
                            />
                          </svg>
                        </a>
                      )}

                      {item.urlYoutube && (
                        <a
                          href={item.urlYoutube}
                          target="_blank"
                          rel="noopener noreferrer"
                          class="inline-flex items-center text-sm text-primary hover:underline"
                        >
                          <span>{t("trailer")}</span>
                          <svg
                            xmlns="http://www.w3.org/2000/svg"
                            class="h-4 w-4 ml-1"
                            fill="none"
                            viewBox="0 0 24 24"
                            stroke="currentColor"
                          >
                            <path
                              stroke-linecap="round"
                              stroke-linejoin="round"
                              stroke-width="2"
                              d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z"
                            />
                            <path
                              stroke-linecap="round"
                              stroke-linejoin="round"
                              stroke-width="2"
                              d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                            />
                          </svg>
                        </a>
                      )}
                    </div>

                    <a
                      href={`/${getFilmSlug(item)}`}
                      class="inline-flex items-center px-3 py-1 bg-primary text-white text-sm rounded hover:bg-red-700 transition"
                    >
                      {t("view_details")}
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        class="h-4 w-4 ml-1"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                      >
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M9 5l7 7-7 7"
                        />
                      </svg>
                    </a>
                  </div>
                </div>
              </div>
            </div>
          ))
        ) : (
          <div class="col-span-full text-center py-16">
            <p class="text-xl text-gray-600 dark:text-gray-300">
              {t("no_filmography_available")}
            </p>
            <p class="mt-4">{t("check_back_later")}</p>
          </div>
        )}
      </div>
    )}
  </div>
</Layout>

