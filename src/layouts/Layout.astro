---
import "../styles/global.css";
import Header from "../components/common/Header.astro";
import Footer from "../components/common/Footer.astro";
import { languages, defaultLanguage } from "../i18n/languages";
import { generateCSP } from "../csp.js";

interface Props {
  title?: string;
  description?: string;
}

// Generar el CSP header
const csp = generateCSP();

// Obtener idioma actual
const currentLang = Astro.locals?.lang || defaultLanguage;

const { title = "RodaYRodar", description = "Productora cinematográfica" } =
  Astro.props;
---

<!doctype html>
<html lang={currentLang}>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="description" content={description} />
    <meta name="generator" content={Astro.generator} />
    <!-- Content Security Policy -->
    <meta http-equiv="Content-Security-Policy" content={csp} />
    <title>{title}</title>
    <!-- Script para corregir problemas de TrustedScript -->
    <script is:inline>
      // Este script se encarga de corregir posibles problemas de CSP con scripts externos
      // como alert-observer.js que pueden estar intentando modificar el DOM

      // Ejecutamos esto inmediatamente para evitar problemas lo antes posible
      (function () {
        try {
          // Desactivar cualquier posible ejecución insegura de scripts externos
          // Esto evita el error de TrustedScript assignment
          if (window.trustedTypes && window.trustedTypes.createPolicy) {
            // Crear una política de TrustedTypes para scripts seguros
            window.trustedTypes.createPolicy("default", {
              createHTML: (string) => string,
              createScriptURL: (string) => string,
              createScript: (string) => string,
            });
          }

          // Parchear Node.textContent para evitar errores de TrustedScript
          const originalSetTextContent = Object.getOwnPropertyDescriptor(
            Node.prototype,
            "textContent"
          ).set;

          if (originalSetTextContent) {
            Object.defineProperty(Node.prototype, "textContent", {
              set(value) {
                try {
                  // Intentar establecer el valor normalmente
                  originalSetTextContent.call(this, value);
                } catch (error) {
                  // Si falla por TrustedScript, usar una alternativa segura
                  if (error.toString().includes("TrustedScript")) {
                    console.warn("Corrigiendo error de TrustedScript");

                    // Eliminar nodos hijos existentes
                    while (this.firstChild) {
                      this.removeChild(this.firstChild);
                    }

                    // Añadir el texto como un nodo de texto seguro
                    if (value != null) {
                      this.appendChild(document.createTextNode(value));
                    }
                  } else {
                    // Si es otro tipo de error, propagarlo
                    throw error;
                  }
                }
              },
              get: function () {
                let text = "";
                for (const child of this.childNodes) {
                  text += child.textContent;
                }
                return text;
              },
              configurable: true,
            });
          }

          console.log("[Alert Observer Fix] Instalado correctamente");
        } catch (error) {
          console.error("[Alert Observer Fix] Error al inicializar:", error);
        }
      })();
    </script>
    <!-- Inicialización del tema con control de errores mejorado -->
    <script is:inline>
      (function () {
        // Configuración de seguridad TrustedTypes
        try {
          if (window.trustedTypes && window.trustedTypes.createPolicy) {
            window.trustedTypes.createPolicy("astro-theme", {
              createHTML: (s) => s,
              createScript: (s) => s,
              createScriptURL: (s) => s,
            });
          }
        } catch (err) {
          console.warn("No se pudo configurar TrustedTypes:", err);
        }

        try {
          // En el servidor, comprobamos la preferencia del usuario
          const theme = (() => {
            if (
              typeof localStorage !== "undefined" &&
              localStorage.getItem("theme")
            ) {
              return localStorage.getItem("theme");
            }
            if (
              window.matchMedia &&
              window.matchMedia("(prefers-color-scheme: dark)").matches
            ) {
              return "dark";
            }
            return "light";
          })();

          // Aplicamos el tema inmediatamente para evitar parpadeo
          if (theme === "dark") {
            document.documentElement.classList.add("dark");
          } else {
            document.documentElement.classList.remove("dark");
          }

          // Este evento se dispara cuando cambia el tema
          document.addEventListener("themeChanged", function (e) {
            try {
              const newTheme = e.detail.theme;
              if (newTheme === "dark") {
                document.documentElement.classList.add("dark");
              } else {
                document.documentElement.classList.remove("dark");
              }
            } catch (err) {
              console.error("Error al procesar el cambio de tema:", err);
            }
          });

          // Marcar que la inicialización del tema se ha completado
          window.themeInitialized = true;
        } catch (err) {
          console.error("Error en la inicialización del tema:", err);
        }
      })();
    </script>

    <!-- Script adicional para manejar errores de alert-observer.js -->
    <script is:inline>
      (function () {
        // Detección y manejo de errores específicos
        window.addEventListener(
          "error",
          function (event) {
            if (
              event.error &&
              event.error.message &&
              event.error.message.includes("TrustedScript")
            ) {
              console.warn(
                "Detectado error de TrustedScript. Deteniendo la propagación."
              );
              event.stopPropagation();
              event.preventDefault();
            }
          },
          true
        );
      })();
    </script>
  </head>
  <body
    class="bg-white dark:bg-gray-900 text-gray-800 dark:text-white min-h-screen flex flex-col"
  >
    <Header />
    <main class="flex-grow">
      <slot />
    </main>
    <Footer />
  </body>
</html>
