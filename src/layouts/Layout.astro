---
import "../styles/global.css";
import "../styles/theme-override.css"; // Importar estilos personalizados de tema
import Header from "../components/common/Header.astro";
import Footer from "../components/common/Footer.astro";
import { languages, defaultLanguage } from "../i18n/languages";
import { generateCSP } from "../csp.js";

interface Props {
  title?: string;
  description?: string;
}

// Generar el CSP header
const csp = generateCSP();

// Obtener idioma actual
const currentLang = Astro.locals?.lang || defaultLanguage;

const { title = "RodaYRodar", description = "Productora cinematográfica" } =
  Astro.props;
---

<!doctype html>
<html
  lang={currentLang}
  class={`${Astro.cookies.get("theme")?.value === "dark" ? "dark" : ""}`}
>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="description" content={description} />
    <meta name="generator" content={Astro.generator} />
    <!-- Content Security Policy -->
    <meta http-equiv="Content-Security-Policy" content={csp} />
    <title>{title}</title>
    <!-- Script para corregir problemas de TrustedScript -->
    <script is:inline>
      // Este script se encarga de corregir posibles problemas de CSP con scripts externos
      // como alert-observer.js que pueden estar intentando modificar el DOM

      // Ejecutamos esto inmediatamente para evitar problemas lo antes posible
      (function () {
        try {
          // Desactivar cualquier posible ejecución insegura de scripts externos
          // Esto evita el error de TrustedScript assignment
          if (window.trustedTypes && window.trustedTypes.createPolicy) {
            // Crear una política de TrustedTypes para scripts seguros
            window.trustedTypes.createPolicy("default", {
              createHTML: (string) => string,
              createScriptURL: (string) => string,
              createScript: (string) => string,
            });
          }

          // Parchear Node.textContent para evitar errores de TrustedScript
          const originalSetTextContent = Object.getOwnPropertyDescriptor(
            Node.prototype,
            "textContent"
          ).set;

          if (originalSetTextContent) {
            Object.defineProperty(Node.prototype, "textContent", {
              set(value) {
                try {
                  // Intentar establecer el valor normalmente
                  originalSetTextContent.call(this, value);
                } catch (error) {
                  // Si falla por TrustedScript, usar una alternativa segura
                  if (error.toString().includes("TrustedScript")) {
                    console.warn("Corrigiendo error de TrustedScript");

                    // Eliminar nodos hijos existentes
                    while (this.firstChild) {
                      this.removeChild(this.firstChild);
                    }

                    // Añadir el texto como un nodo de texto seguro
                    if (value != null) {
                      this.appendChild(document.createTextNode(value));
                    }
                  } else {
                    // Si es otro tipo de error, propagarlo
                    throw error;
                  }
                }
              },
              get: function () {
                let text = "";
                for (const child of this.childNodes) {
                  text += child.textContent;
                }
                return text;
              },
              configurable: true,
            });
          }

          console.log("[Alert Observer Fix] Instalado correctamente");
        } catch (error) {
          console.error("[Alert Observer Fix] Error al inicializar:", error);
        }
      })();
    </script>
    <!-- Inicialización del tema con control de errores mejorado y mayor robustez -->
    <script is:inline>
      (function () {
        // Configuración de seguridad TrustedTypes
        try {
          if (window.trustedTypes && window.trustedTypes.createPolicy) {
            window.trustedTypes.createPolicy("astro-theme", {
              createHTML: (s) => s,
              createScript: (s) => s,
              createScriptURL: (s) => s,
            });
          }
        } catch (err) {
          console.warn("No se pudo configurar TrustedTypes:", err);
        }

        try {
          console.log("[Layout] Inicializando tema en Layout.astro");

          // Función para determinar si debe usarse el tema oscuro
          const shouldUseDarkTheme = () => {
            try {
              // 1. Verificar localStorage primero (preferencia explícita del usuario)
              if (typeof localStorage !== "undefined") {
                const savedTheme = localStorage.getItem("theme");
                if (savedTheme === "dark") {
                  console.log(
                    "[Layout] Tema oscuro encontrado en localStorage"
                  );
                  return true;
                }
                if (savedTheme === "light") {
                  console.log("[Layout] Tema claro encontrado en localStorage");
                  return false;
                }
              }

              // 2. Verificar preferencia del sistema
              if (
                window.matchMedia &&
                window.matchMedia("(prefers-color-scheme: dark)").matches
              ) {
                console.log("[Layout] Preferencia del sistema: tema oscuro");
                return true;
              }

              // 3. Por defecto, tema claro
              console.log("[Layout] Usando tema claro por defecto");
              return false;
            } catch (error) {
              console.error("[Layout] Error al determinar el tema:", error);
              return false; // Por defecto, tema claro en caso de error
            }
          };

          // Aplicamos el tema inmediatamente para evitar parpadeo
          const isDarkTheme = shouldUseDarkTheme();

          if (isDarkTheme) {
            document.documentElement.classList.add("dark");
            console.log("[Layout] Aplicado tema oscuro al HTML");
          } else {
            document.documentElement.classList.remove("dark");
            console.log("[Layout] Aplicado tema claro al HTML");
          }

          // Escuchar eventos de cambio de tema de diferentes fuentes
          // 1. Evento de componentes Astro/JS
          document.addEventListener("themeChanged", function (e) {
            try {
              const newTheme = e.detail.theme;
              console.log("[Layout] Evento themeChanged recibido:", newTheme);

              if (newTheme === "dark") {
                document.documentElement.classList.add("dark");
              } else {
                document.documentElement.classList.remove("dark");
              }

              console.log("[Layout] Tema actualizado a", newTheme);
            } catch (err) {
              console.error(
                "[Layout] Error al procesar el cambio de tema:",
                err
              );
            }
          });

          // 2. Evento de componentes React
          window.addEventListener("theme-changed", function (e) {
            try {
              const newTheme = e.detail.theme;
              console.log("[Layout] Evento theme-changed recibido:", newTheme);

              if (newTheme === "dark") {
                document.documentElement.classList.add("dark");
              } else {
                document.documentElement.classList.remove("dark");
              }
            } catch (err) {
              console.error("[Layout] Error al procesar theme-changed:", err);
            }
          });

          // 3. Observar cambios en localStorage (otros navegadores/pestañas)
          window.addEventListener("storage", function (e) {
            if (e.key === "theme") {
              console.log(
                "[Layout] Cambio de tema detectado en localStorage:",
                e.newValue
              );
              if (e.newValue === "dark") {
                document.documentElement.classList.add("dark");
              } else {
                document.documentElement.classList.remove("dark");
              }
            }
          });

          // 4. Observar cambios en la preferencia del sistema
          try {
            const mediaQuery = window.matchMedia(
              "(prefers-color-scheme: dark)"
            );

            const handleSystemThemeChange = (e) => {
              // Solo actualizar si no hay preferencia explícita guardada
              if (!localStorage.getItem("theme")) {
                console.log(
                  "[Layout] Preferencia de tema del sistema cambiada:",
                  e.matches ? "oscuro" : "claro"
                );

                if (e.matches) {
                  document.documentElement.classList.add("dark");
                } else {
                  document.documentElement.classList.remove("dark");
                }
              }
            };

            if (mediaQuery.addEventListener) {
              mediaQuery.addEventListener("change", handleSystemThemeChange);
            } else if (mediaQuery.addListener) {
              // Fallback para navegadores más antiguos
              mediaQuery.addListener(handleSystemThemeChange);
            }
          } catch (e) {
            console.error(
              "[Layout] Error al configurar observador de tema del sistema:",
              e
            );
          }

          // Marcar que la inicialización del tema se ha completado
          window.themeInitialized = true;
          console.log("[Layout] Inicialización del tema completada");
        } catch (err) {
          console.error("[Layout] Error en la inicialización del tema:", err);
        }
      })();
    </script>

    <!-- Script adicional para manejar errores de alert-observer.js -->
    <script is:inline>
      (function () {
        // Detección y manejo de errores específicos
        window.addEventListener(
          "error",
          function (event) {
            if (
              event.error &&
              event.error.message &&
              event.error.message.includes("TrustedScript")
            ) {
              console.warn(
                "Detectado error de TrustedScript. Deteniendo la propagación."
              );
              event.stopPropagation();
              event.preventDefault();
            }
          },
          true
        );
      })();
    </script>

    <!-- Script para exponer el estado del tema para depuración -->
    <script>
      import { initThemeDebugTools } from "../lib/themeDebug.js";

      // Solo inicializar en desarrollo
      if (import.meta.env.DEV) {
        // Inicializar herramientas de depuración
        document.addEventListener("DOMContentLoaded", () => {
          initThemeDebugTools();
        });
      }
    </script>
  </head>
  <body
    class="bg-white dark:bg-gray-900 text-gray-800 dark:text-white min-h-screen flex flex-col transition-colors duration-300"
    data-theme={Astro.cookies.get("theme")?.value || "light"}
  >
    <div
      id="theme-status-indicator"
      class="fixed top-2 right-2 w-3 h-3 rounded-full z-50 hidden"
    >
    </div>

    <Header />
    <main class="flex-grow">
      <slot />
    </main>
    <Footer />

    <!-- Script para verificar visualmente el tema actual -->
    <script is:inline>
      (function () {
        const indicator = document.getElementById("theme-status-indicator");
        const isDark = document.documentElement.classList.contains("dark");

        if (indicator) {
          indicator.classList.remove("hidden");
          indicator.style.backgroundColor = isDark ? "#ffffff" : "#000000";
          indicator.title = isDark ? "Tema Oscuro Activo" : "Tema Claro Activo";

          // Ocultar después de 5 segundos
          setTimeout(() => {
            indicator.classList.add("hidden");
          }, 5000);
        }
      })();
    </script>
  </body>
</html>
